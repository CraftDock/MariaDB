#!/usr/bin/env bash

# shellcheck disable=SC1091
# shellcheck disable=SC2086

# set -e : Exit the script if any statement returns a non-true return value.
# set -u : Exit the script when using uninitialised variable.
set -eu

# Add libraries
source /usr/local/lib/bash-logger.sh
source /usr/local/lib/persist-env.sh

# Redirect STDERR to STDOUT
exec 2>&1

# Default values
export MYSQL_DATA_DIR=${MYSQL_DATA_DIR:=${MARIADB_DATA_DIR:='/mariadb/data/'}}
export MYSQL_INSTALL_PARAMS=${MYSQL_INSTALL_PARAMS:=''}
export MYSQL_STARTCMD=${MYSQL_STARTCMD:='/usr/bin/mysqld'}
export MYSQL_STARTPARAMS=${MYSQL_STARTPARAMS:='--skip-host-cache --skip-name-resolve --debug-gdb'}
export MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:=''}
export MYSQL_ALLOW_EMPTY_PASSWORD=${MYSQL_ALLOW_EMPTY_PASSWORD:=false}
export MYSQL_RANDOM_ROOT_PASSWORD=${MYSQL_RANDOM_ROOT_PASSWORD:=false}
export MYSQL_DATABASE=${MYSQL_DATABASE:=''}
export MYSQL_USER=${MYSQL_USER:=''}
export MYSQL_PASSWORD=${MYSQL_PASSWORD:=''}

# Make sure tmp folder exist
mkdir -p /var/tmp/mariadb
chown -R $MARIADB_USER:$MARIADB_GROUP /var/tmp/mariadb


# If the MYSQL_DATA_DIR doesn't exist, this mean
# that we perform the first install.
if [ -z "$(ls -A $MYSQL_DATA_DIR)" ]; then

    # First, check for root password
    if [ -z "$MYSQL_ROOT_PASSWORD" ] && [ "$MYSQL_RANDOM_ROOT_PASSWORD" = 'false' ] && [ "$MYSQL_ALLOW_EMPTY_PASSWORD" = 'false' ]; then
        WARNING ''
        WARNING ''
        WARNING 'Error: database is uninitialized and password option is not specified'
        WARNING 'You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_RANDOM_ROOT_PASSWORD or MYSQL_ALLOW_EMPTY_PASSWORD'
        WARNING ''
        exit 1
    fi

    NOTICE ''
    NOTICE "An empty or uninitialized MariaDB volume is detected in $MYSQL_DATA_DIR"
    NOTICE ''
    NOTICE 'Installing MariaDB ...'

    # Create the MYSQL_DATA_DIR and give full access to mariadb user.
    mkdir -p "$MYSQL_DATA_DIR"
    chown -R $MARIADB_USER:$MARIADB_GROUP "$MYSQL_DATA_DIR"

    # By default, use the root password defined by the user
    # or use a random password if MYSQL_RANDOM_ROOT_PASSWORD is true
    # or use an empty password if MYSQL_ALLOW_EMPTY_PASSWORD is true
    if [ -z "$MYSQL_ROOT_PASSWORD" ]; then
        # random password
        if [ "$MYSQL_RANDOM_ROOT_PASSWORD" = 'true' ]; then
            MYSQL_ROOT_PASSWORD="$(date +%s | sha256sum | md5sum | base64 | head -c 16)"
            WARNING "GENERATED ROOT PASSWORD: $MYSQL_ROOT_PASSWORD"
        # Empty password
        elif [ "$MYSQL_ALLOW_EMPTY_PASSWORD" = 'true' ]; then
            MYSQL_ROOT_PASSWORD="''"
        fi
    fi

    # It's time to initialize the database
    NOTICE ''
    NOTICE 'Initializing database ...'
    NOTICE '  mysql_install_db'
    NOTICE "    --user=$MARIADB_USER"
    NOTICE '    --basedir=/usr'
    NOTICE '    --datadir='"$MYSQL_DATA_DIR"
    NOTICE '    --rpm'
    NOTICE '    --cross-bootstrap'
    if [ -n "$MYSQL_INSTALL_PARAMS" ] ; then NOTICE '    '"$MYSQL_INSTALL_PARAMS"; fi
    NOTICE "    --defaults-file=$MARIADB_CONFIG_DIR/mariadb.cnf"
    NOTICE ''
    mysql_install_db --user=$MARIADB_USER --basedir=/usr --datadir="$MYSQL_DATA_DIR" --rpm --cross-bootstrap "$MYSQL_INSTALL_PARAMS" --defaults-file=$MARIADB_CONFIG_DIR/mariadb.cnf
    NOTICE ''
    NOTICE 'Database initialized'

    # Init file used at startup
    INIT_FILE="/var/tmp/mariadb/mariadb-boot.sql"

    # Create root user
    echo "
    USE mysql;
    FLUSH PRIVILEGES;
    GRANT ALL ON *.* TO 'root'@'%' identified by '$MYSQL_ROOT_PASSWORD' WITH GRANT OPTION;
    GRANT ALL ON *.* TO 'root'@'localhost' identified by '$MYSQL_ROOT_PASSWORD' WITH GRANT OPTION;
    SET PASSWORD FOR 'root'@'localhost'=PASSWORD('${MYSQL_ROOT_PASSWORD}');
    DROP DATABASE IF EXISTS test;
    FLUSH PRIVILEGES;
    " >| ${INIT_FILE}

    # Create database
    if [ -n "${MYSQL_USER}" ] && [ -n "${MYSQL_DATABASE}" ]; then
        NOTICE ''
        NOTICE "Creating database ${MYSQL_DATABASE} ..."
        echo "
        CREATE DATABASE IF NOT EXISTS \`${MYSQL_DATABASE}\`;
        GRANT ALL PRIVILEGES ON \`${MYSQL_DATABASE}\`.* TO '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
        FLUSH PRIVILEGES;
        " >> ${INIT_FILE}
    fi

    # Create user database
    if [ -n "${MYSQL_USER}" ] && [ -z "${MYSQL_DATABASE}" ]; then
        NOTICE ''
        NOTICE "Creating user database ${MYSQL_USER} ..."
        echo "
        CREATE DATABASE IF NOT EXISTS \`${MYSQL_USER}\`;
        GRANT ALL PRIVILEGES ON \`${MYSQL_USER}\`.* TO '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
        FLUSH PRIVILEGES;
        " >> ${INIT_FILE}
    fi

    # Update start command
    MYSQL_STARTCMD="${MYSQL_STARTCMD} --init-file=${INIT_FILE}"

    #
    cat ${INIT_FILE} | DEBUG
else
    NOTICE ''
    NOTICE "Found existing MariaDB volume in $MYSQL_DATA_DIR"
    NOTICE ''
fi

# Make sure the backup file can be excuted
chmod +x /etc/periodic/daily_3am/db_backup

# Let's go and start MariaDB
NOTICE ''
NOTICE 'Starting MariaDB'
NOTICE "  su-exec ${MARIADB_USER}"
NOTICE "    ${MYSQL_STARTCMD}"
NOTICE "    --user=$MARIADB_USER"
NOTICE "    --basedir=/usr"
NOTICE "    --datadir=$MYSQL_DATA_DIR"
NOTICE "    --plugin-dir=/usr/lib/mysql/plugin"
NOTICE "    --pid-file=/var/run/mariadb/mariadb.pid"
NOTICE "    --socket=/var/run/mariadb/mariadb.sock"
if [ -n "$MYSQL_STARTPARAMS" ] ; then NOTICE '    '"$MYSQL_STARTPARAMS"; fi
NOTICE ''

exec su-exec ${MARIADB_USER} \
    ${MYSQL_STARTCMD} \
    --user=${MARIADB_USER} \
    --basedir=/usr \
    --datadir="$MYSQL_DATA_DIR" \
    --plugin-dir=/usr/lib/mysql/plugin \
    --pid-file=/var/run/mariadb/mariadb.pid \
    --socket=/var/run/mariadb/mariadb.sock \
    ${MYSQL_STARTPARAMS}


# This exit code will be sent as the first parameter to the finish script
exit 1
