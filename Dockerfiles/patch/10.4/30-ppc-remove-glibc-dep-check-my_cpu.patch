--- include/my_cpu.h
+++ include/my_cpu.h
@@ -24,19 +24,18 @@
 */
 
 #ifdef _ARCH_PWR8
-#include <sys/platform/ppc.h>
 /* Very low priority */
-#define HMT_very_low() __ppc_set_ppr_very_low()
+#define HMT_very_low() __asm__ __volatile__ ("or 31,31,31")
 /* Low priority */
-#define HMT_low() __ppc_set_ppr_low()
+#define HMT_low() __asm__ __volatile__ ("or 1,1,1")
 /* Medium low priority */
-#define HMT_medium_low() __ppc_set_ppr_med_low()
+#define HMT_medium_low() __asm__ __volatile__ ("or 6,6,6")
 /* Medium priority */
-#define HMT_medium() __ppc_set_ppr_med()
+#define HMT_medium() __asm__ __volatile__ ("or 2,2,2")
 /* Medium high priority */
-#define HMT_medium_high() __ppc_set_ppr_med_high()
+#define HMT_medium_high() __asm__ __volatile__ ("or 5,5,5")
 /* High priority */
-#define HMT_high() asm volatile("or 3,3,3")
+#define HMT_high() __asm__ __volatile__ ("or 3,3,3")
 #else
 #define HMT_very_low()
 #define HMT_low()
@@ -72,7 +71,7 @@ static inline void MY_RELAX_CPU(void)
   __asm__ __volatile__ ("pause");
 #endif
 #elif defined(_ARCH_PWR8)
-  __ppc_get_timebase();
+  __builtin_ppc_get_timebase();
 #else
   int32 var, oldval = 0;
   my_atomic_cas32_strong_explicit(&var, &oldval, 1, MY_MEMORY_ORDER_RELAXED,
